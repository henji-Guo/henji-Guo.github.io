<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to use BME280</title>
      <link href="/2020/11/15/how-to-use-bme280/"/>
      <url>/2020/11/15/how-to-use-bme280/</url>
      
        <content type="html"><![CDATA[<h2 id="BME280-Library"><a href="#BME280-Library" class="headerlink" title="BME280 Library"></a>BME280 Library</h2><h3 id="1-Open-Arduino-IDE"><a href="#1-Open-Arduino-IDE" class="headerlink" title="1. Open Arduino IDE"></a>1. Open Arduino IDE</h3><p><img src="https://img-blog.csdnimg.cn/20201114204123125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="2-Select-the-board"><a href="#2-Select-the-board" class="headerlink" title="2. Select the board"></a>2. Select the board</h3><p><img src="https://img-blog.csdnimg.cn/20201114204223441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="3-Select-the-board"><a href="#3-Select-the-board" class="headerlink" title="3. Select the board"></a>3. Select the board</h3><p><img src="https://img-blog.csdnimg.cn/20201114204257892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="4-click-the-Manage-Libraries"><a href="#4-click-the-Manage-Libraries" class="headerlink" title="4. click the Manage Libraries"></a>4. click the Manage Libraries</h3><p><img src="https://img-blog.csdnimg.cn/20201114204403545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="5-Installing-the-BME280-Library"><a href="#5-Installing-the-BME280-Library" class="headerlink" title="5. Installing the BME280 Library"></a>5. Installing the BME280 Library</h3><p><img src="https://img-blog.csdnimg.cn/20201114204914197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201114204953399.png#pic_center"><br>Done.</p><h2 id="IIC-Instance"><a href="#IIC-Instance" class="headerlink" title="IIC Instance"></a>IIC Instance</h2><h3 id="IIC-PIN"><a href="#IIC-PIN" class="headerlink" title="IIC PIN"></a>IIC PIN</h3><p><img src="https://img-blog.csdnimg.cn/20201114220512251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*  ==================================================================================  SPDX-License-Identifier: GPL-3.0-or-later  File_name : BME280_IIC.ino  Describe  : Using IIC to read BME280  Author    : GHJ  Date      : 2020年11月14日 21:00:00  PS:     需要BME280->BME280库:https://github.com/adafruit/Adafruit_BME280_Library.git  Change Logs:  Date               Author          Notes  2020年11月14日       GHJ         the first version  ===================================================================================*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_BME280.h></span></span><span class="token comment" spellcheck="true">/*       Interconnect*  *  ESP32  &lt;--PIN-->   BME280*  G22    &lt;------->   SCL*  G21    &lt;------->   SDA *  3.3V   &lt;------->   VCC *  GND    &lt;------->   GND *  */</span>  <span class="token comment" spellcheck="true">/*Slave address ,according to the BME280 Datasheet*/</span><span class="token macro property">#<span class="token directive keyword">define</span> IIC_address_BME280 0x76</span><span class="token comment" spellcheck="true">/* Using IIC  */</span><span class="token comment" spellcheck="true">/*The Wire is equivalent to IIC.*/</span>Adafruit_BME280 bme<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>bme<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>IIC_address_BME280<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Wire<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It took too long to initialize , Pls check any about your sensor !!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ESP.restart(); //restart ESP32</span>   <span class="token punctuation">}</span>   Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The sensor of bme280 is Initializing ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The Sensor of BME280 initiated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Temperature: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bme<span class="token punctuation">.</span><span class="token function">readTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" °C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Humidity: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bme<span class="token punctuation">.</span><span class="token function">readHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" RH%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Air pressure : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bme<span class="token punctuation">.</span><span class="token function">readPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Pa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SPI-Instance"><a href="#SPI-Instance" class="headerlink" title="SPI Instance"></a>SPI Instance</h2><h3 id="SPI-PIN"><a href="#SPI-PIN" class="headerlink" title="SPI PIN"></a>SPI PIN</h3><p><img src="https://img-blog.csdnimg.cn/20201114222619627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZW5qaS1ndW8uZ2l0aHViLmlv,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*   ==================================================================================   SPDX-License-Identifier: GPL-3.0-or-later   File_name : BME280_SPI.ino   Describe  : Using SPI to read BME280   Author    : GHJ   Date      : 2020年11月14日 21:00:00   PS:      需要BME280->BME280库:https://github.com/adafruit/Adafruit_BME280_Library.git   Change Logs:   Date               Author          Notes   2020年11月14日       GHJ         the first version   ===================================================================================*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_BME280.h></span></span><span class="token comment" spellcheck="true">/*       Interconnect *   *  ESP32  &lt;--PIN-->   BME280 *  3.3V   &lt;------->   VCC  *  GND    &lt;------->   GND *  SCLK   &lt;------->   SCL  *  MOSI   &lt;------->   SDA *  MISO   &lt;------->   SDO *  SS     &lt;------->   CSB */</span>  <span class="token comment" spellcheck="true">/*SPI Chip Selected . Low voltage active*/</span><span class="token macro property">#<span class="token directive keyword">define</span> SCLK 5</span><span class="token comment" spellcheck="true">/* Using SPI  */</span><span class="token comment" spellcheck="true">/*The SPI .*/</span>Adafruit_BME280 <span class="token function">bme</span><span class="token punctuation">(</span>SCLK<span class="token punctuation">,</span><span class="token operator">&amp;</span>SPI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>bme<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It took too long to initialize , Pls check any about your sensor !!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ESP<span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//restart ESP32</span>    <span class="token punctuation">}</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The sensor of bme280 is Initializing ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The Sensor of BME280 initiated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Temperature: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bme<span class="token punctuation">.</span><span class="token function">readTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" °C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Humidity: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bme<span class="token punctuation">.</span><span class="token function">readHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" RH%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Air pressure : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bme<span class="token punctuation">.</span><span class="token function">readPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Pa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Done .</p>]]></content>
      
      
      <categories>
          
          <category> ESP32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(二) ------ 移植STM32[Keil]</title>
      <link href="/2020/08/30/threadx-er-yi-zhi-dao-stm32-keil/"/>
      <url>/2020/08/30/threadx-er-yi-zhi-dao-stm32-keil/</url>
      
        <content type="html"><![CDATA[<h2 id="裸机项目（Keil）"><a href="#裸机项目（Keil）" class="headerlink" title="裸机项目（Keil）"></a>裸机项目（Keil）</h2><p>确保裸机项目没问题<br><img src="https://img-blog.csdnimg.cn/20200829095850105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200829095939757.png#pic_center"></p><h2 id="移植ThreadX"><a href="#移植ThreadX" class="headerlink" title="移植ThreadX"></a>移植ThreadX</h2><ul><li><p>添加头文件路径<br><img src="https://img-blog.csdnimg.cn/20200829103353583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>添加源码路径<br><img src="https://img-blog.csdnimg.cn/20200829103536216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>修改编译（用armc6）<br><img src="https://img-blog.csdnimg.cn/20200829103901869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>armc5 的话是没有这个的，会报一推错误<br><img src="https://img-blog.csdnimg.cn/20200829104012302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>第一次编译</p></li></ul><p>重复定义错误，注释掉 xxxx.it.c 里面对应的函数<br><img src="https://img-blog.csdnimg.cn/20200829104156750.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200829104405247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>第二次编译</li></ul><p>七个错误一个一个来<br><img src="https://img-blog.csdnimg.cn/20200829104452486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ol><li>__RAM_segment_used_end__ = __initial_sp  初始化起始地址<br><img src="https://img-blog.csdnimg.cn/20200829104710420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li><li>把 _vectors 全部替换成 startup…….s 里面的  __Vectors<br><img src="https://img-blog.csdnimg.cn/20200829105100595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200829105151270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li><li>注释 @<ul><li>_tx_execution_isr_exit   </li><li>_tx_execution_isr_entry</li><li>_tx_execution_thread_enter</li><li>_tx_execution_thread_exit<br><img src="https://img-blog.csdnimg.cn/20200829105316270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200829105428761.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200829105509859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li></ul></li></ol><ul><li>第三次编译</li></ul><p>在main.c里面添加 “tx_api.h”<br>main()函数while(1)前添加     tx_kernel_enter( );</p><p>实现函数 void tx_application_define(void *first_unused_memory)</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* Private includes ----------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE END Includes */</span><span class="token comment" spellcheck="true">/* Private variables ---------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD my_thread1<span class="token punctuation">;</span>TX_THREAD my_thread2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"====ThreadX===="</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"====ThreadX===="</span><span class="token punctuation">)</span><span class="token punctuation">,</span>HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>  <span class="token comment" spellcheck="true">/* Infinite loop */</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* USER CODE END WHILE */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 3 */</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* USER CODE END 3 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN 4 */</span><span class="token keyword">void</span> <span class="token function">my_thread1_entry</span><span class="token punctuation">(</span>ULONG thread_input<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Enter into a forever loop. */</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"threadx 1 ..."</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"threadx 1 ..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">my_thread2_entry</span><span class="token punctuation">(</span>ULONG thread_input<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Enter into a forever loop. */</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"threadx 2 ..."</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"threadx 2 ..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Create my_thread! */</span>  <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread1<span class="token punctuation">,</span> <span class="token string">"My Thread 1"</span><span class="token punctuation">,</span>  my_thread1_entry<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> first_unused_memory<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TX_NO_TIME_SLICE<span class="token punctuation">,</span> TX_AUTO_START<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread2<span class="token punctuation">,</span> <span class="token string">"My Thread 2"</span><span class="token punctuation">,</span>  my_thread2_entry<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> first_unused_memory<span class="token operator">+</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TX_NO_TIME_SLICE<span class="token punctuation">,</span> TX_AUTO_START<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200829110804576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(十)---定时器TIME</title>
      <link href="/2020/08/28/threadx-shi-ding-shi-qi-time/"/>
      <url>/2020/08/28/threadx-shi-ding-shi-qi-time/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>tx_timer_create</li><li>tx_timer_delete</li><li>tx_timer_activate</li><li>tx_timer_change</li><li>tx_timer_deactivate</li></ul><h3 id="tx-timer-create"><a href="#tx-timer-create" class="headerlink" title="tx_timer_create"></a>tx_timer_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_timer_create</span><span class="token punctuation">(</span>TX_TIMER <span class="token operator">*</span>timer_ptr<span class="token punctuation">,</span> CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">,</span>    <span class="token function">VOID</span> <span class="token punctuation">(</span><span class="token operator">*</span>expiration_function<span class="token punctuation">)</span><span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span><span class="token punctuation">,</span>    ULONG expiration_input<span class="token punctuation">,</span> ULONG initial_ticks<span class="token punctuation">,</span>    ULONG reschedule_ticks<span class="token punctuation">,</span> UINT auto_activate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>timer_ptr 指向计时器控制块的指针</li><li>name_ptr 指向计时器名称的指针。</li><li>expiration_function 当计时器过期时要调用的应用程序函数。</li><li>expiration_input 当计时器过期时，输入将传递到过期函数。</li><li>initial_ticks 指定计时器过期的初始刻度数。值的范围为 1 到 0xFFFF。</li><li>reschedule_ticks 指定第一个计时器过期后的所有计时器的刻度数。此参数的零使计时器成为一次计时器。否则，对于定期计时器，合法值的范围为 1 到 0xFFFF。</li><li>注意 一次计时器过期后，必须通过一个tx_timer_change重置，然后才能再次激活。</li><li>auto_activate 确定计时器在创建过程中是否自动激活。如果此值为<ol><li>TX_AUTO_ACTIVATE （0x01），则计时器将处于活动状态。否则，如果选择了</li><li>TX_NO_ACTIVATE （0x00） 的值，则计时器将创建为非活动状态。在这种情况下，需要进行tx_timer_activate服务调用，才能实际启动计时器。</li></ol></li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建应用程序计时器。</li><li>TX_TIMER_ERROR （0x15） 无效应用程序计时器指针。指针为 NULL 或已创建计时器。</li><li>TX_TICK_ERROR报价提供的无效值 （0x16） 无效值 （零）。</li><li>TX_ACTIVATE_ERROR （0x17） 无效激活。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-timer-delete"><a href="#tx-timer-delete" class="headerlink" title="tx_timer_delete"></a>tx_timer_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_timer_delete</span><span class="token punctuation">(</span>TX_TIMER <span class="token operator">*</span>timer_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>timer_ptr 指向以前创建的应用程序计时器的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功删除应用程序计时器。</li><li>TX_TIMER_ERROR （0x15） 无效应用程序计时器指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-timer-activate"><a href="#tx-timer-activate" class="headerlink" title="tx_timer_activate"></a>tx_timer_activate</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_timer_activate</span><span class="token punctuation">(</span>TX_TIMER <span class="token operator">*</span>timer_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>timer_ptr 指向以前创建的应用程序计时器的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功激活应用程序计时器。</li><li>TX_TIMER_ERROR （0x15） 无效应用程序计时器指针。</li><li>TX_ACTIVATE_ERROR （0x17） 计时器已处于活动状态，或者是已过期的一次计时器。</li></ul><h3 id="tx-timer-change"><a href="#tx-timer-change" class="headerlink" title="tx_timer_change"></a>tx_timer_change</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_timer_change</span><span class="token punctuation">(</span>TX_TIMER <span class="token operator">*</span>timer_ptr<span class="token punctuation">,</span>    ULONG initial_ticks<span class="token punctuation">,</span> ULONG reschedule_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>timer_ptr 指向计时器控制块的指针。</li><li>initial_ticks 指定计时器过期的初始刻度数。值的范围为 1 到 0xFFFF。</li><li>reschedule_ticks 指定第一个计时器过期后的所有计时器的刻度数。此参数的零使计时器成为一次计时器。否则，对于定期计时器，合法值的范围为 1 到 0xFFFF。</li><li>注意 过期的一次定时器必须通过tx_timer_change，然后才能再次激活。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功的应用程序计时器更改。</li><li>TX_TIMER_ERROR （0x15） 无效应用程序计时器指针。</li><li>TX_TICK_ERROR报价提供的无效值 （0x16） 无效值 （零）。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li><li><h3 id="tx-timer-deactivate"><a href="#tx-timer-deactivate" class="headerlink" title="tx_timer_deactivate"></a>tx_timer_deactivate</h3></li></ul><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_timer_deactivate</span><span class="token punctuation">(</span>TX_TIMER <span class="token operator">*</span>timer_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>timer_ptr指向以前创建的应用程序计时器的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功应用计时器停用。</li><li>TX_TIMER_ERROR （0x15） 无效应用程序计时器指针。</li></ul><h2 id="TIME-demo"><a href="#TIME-demo" class="headerlink" title="TIME_demo"></a>TIME_demo</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * TIME_demo.c * Change Logs: * Date           Author       Notes * 2020年8月28日           henji      the first version */</span><span class="token comment" spellcheck="true">/* Private includes ----------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* 软定时器 */</span>TX_TIMER timer_1<span class="token punctuation">;</span>TX_TIMER timer_2<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token comment" spellcheck="true">/* Infinite loop */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer_1_entry</span><span class="token punctuation">(</span>ULONG expiration_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"I am timer 1 "</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"I am timer 1 "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer_2_entry</span><span class="token punctuation">(</span>ULONG expiration_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"I am timer 2 "</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"I am timer 2 "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*使能追踪*/</span>    trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span>registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 创建定时器1 */</span>    <span class="token function">tx_timer_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_1<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//定时器控制块</span>                    <span class="token string">"timer 1"</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//定时器名称</span>                    Timer_1_entry<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//定时器入口函数</span>                    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//定时器入口参数</span>                    <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//定时器初始定时 500 Ticks</span>                    <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//定时器重载500 Ticks (0 ticks 一次性定时器   )</span>                    TX_AUTO_ACTIVATE <span class="token comment" spellcheck="true">//自动激活</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 创建定时器2 */</span>    <span class="token function">tx_timer_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_2<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//定时器控制块</span>                    <span class="token string">"timer 2"</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//定时器名称</span>                    Timer_2_entry<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//定时器入口函数</span>                    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//定时器入口参数</span>                    <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//定时器初始定时 500 Ticks</span>                    <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//定时器重载500 Ticks (0 ticks 一次性定时器   )</span>                    TX_AUTO_ACTIVATE <span class="token comment" spellcheck="true">//自动激活</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200828214845696.png#pic_center"></p><p>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(九)---消息队列Queue</title>
      <link href="/2020/08/28/threadx-jiu-xiao-xi-dui-lie-queue/"/>
      <url>/2020/08/28/threadx-jiu-xiao-xi-dui-lie-queue/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>tx_queue_create</li><li>tx_queue_delete</li><li>tx_queue_flush</li><li>tx_queue_front_send</li><li>tx_queue_receive</li><li>tx_queue_send_notify</li></ul><h3 id="tx-queue-create"><a href="#tx-queue-create" class="headerlink" title="tx_queue_create"></a>tx_queue_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_create</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">,</span> CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">,</span>    UINT message_size<span class="token punctuation">,</span>    VOID <span class="token operator">*</span>queue_start<span class="token punctuation">,</span> ULONG queue_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>queue_ptr 指向消息队列控件块的指针。</li><li>name_ptr 指向消息队列的名称的指针。</li><li>message_size 指定队列中每条消息的大小。消息大小范围从 1 个 32 位单词到 16 个 32 位单词。有效消息大小选项是 1 到 16 的数值（含）。</li><li>queue_start 消息队列的起始地址。起始地址必须与 ULONG 数据类型的大小对齐。</li><li>queue_size 消息队列可用的字节总数。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建消息队列。</li><li>TX_QUEUE_ERROR （0x09） 无效消息队列指针。指针为 NULL 或队列已创建。</li><li>TX_PTR_ERROR （0x03） 消息队列的无效起始地址。</li><li>TX_SIZE_ERROR （0x05） 消息队列的大小无效。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-queue-delete"><a href="#tx-queue-delete" class="headerlink" title="tx_queue_delete"></a>tx_queue_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_delete</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>queue_ptr 指向以前创建的消息队列的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功删除消息队列。</li><li>TX_QUEUE_ERROR （0x09） 无效消息队列指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="x-queue-flush"><a href="#x-queue-flush" class="headerlink" title="x_queue_flush"></a>x_queue_flush</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_flush</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>queue_ptr 指向以前创建的消息队列的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功消息队列刷新。</li><li>TX_QUEUE_ERROR （0x09） 无效消息队列指针。</li></ul><h3 id="tx-queue-front-send"><a href="#tx-queue-front-send" class="headerlink" title="tx_queue_front_send"></a>tx_queue_front_send</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_front_send</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">,</span>    VOID <span class="token operator">*</span>source_ptr<span class="token punctuation">,</span> ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>queue_ptr 指向消息队列控件块的指针。</li><li>source_ptr 指向消息的指针。</li><li>wait_option 定义如果消息队列已满，服务的行为方式。等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从非线程调用服务，则这是唯一有效的选项;例如，初始化、计时器或 ISR。</li><li>TX_WAIT_FOREVER （0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到队列中存在空间。</li><li>超时值 （0x0000001 到 0xFFFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待队列中的房间时保持挂起的计时器刻度的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功发送消息。</li><li>TX_DELETED时，已删除消息队列 （0x01） 消息队列。</li><li>TX_QUEUE_FULL （0x0B） 服务无法发送消息，因为队列在指定等待的持续时间内已满。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_QUEUE_ERROR （0x09） 无效消息队列指针。</li><li>TX_PTR_ERROR （0x03） 消息的无效源指针。</li><li>TX_WAIT_ERROR （0x04） 在非线程的TX_NO_WAIT上指定了除其他帐户以外的等待选项。</li></ul><h3 id="tx-queue-receive"><a href="#tx-queue-receive" class="headerlink" title="tx_queue_receive"></a>tx_queue_receive</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_receive</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">,</span>    VOID <span class="token operator">*</span>destination_ptr<span class="token punctuation">,</span> ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数</p><ul><li>queue_ptr 指向以前创建的消息队列。</li><li>destination_ptr 复制邮件的位置。</li><li>wait_option 定义如果消息队列为空，服务的行为方式。等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从非线程调用服务，则这是唯一有效的选项;例如，初始化、计时器或 ISR。</li><li>TX_WAIT_FOREVER （0xFFFF） - TX_WAIT_FOREVER调用线程将无限期挂起，直到消息可用。</li><li>超时值 （0x0000001 到 0xFFFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待消息时保持挂起计时器刻度的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功检索消息。</li><li>TX_DELETED时，已删除消息队列 （0x01） 消息队列。</li><li>TX_QUEUE_EMPTY （0x0A） 服务无法检索消息，因为队列在指定等待的持续时间内为空。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_QUEUE_ERROR （0x09） 无效消息队列指针。</li><li>TX_PTR_ERROR （0x03） 消息的无效目标指针。</li><li>TX_WAIT_ERROR （0x04） 在从非TX_NO_WAIT的呼叫上指定的等待选项（非线程） 以外的等待选项。</li></ul><h3 id="tx-queue-send"><a href="#tx-queue-send" class="headerlink" title="tx_queue_send"></a>tx_queue_send</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_send</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">,</span>    VOID <span class="token operator">*</span>source_ptr<span class="token punctuation">,</span> ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>queue_ptr 指向以前创建的消息队列。</li><li>source_ptr 指向消息的指针。</li><li>wait_option 定义如果消息队列已满，服务的行为方式。等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从非线程调用服务，则这是唯一有效的选项;例如，初始化、计时器或 ISR。</li><li>TX_WAIT_FOREVER （0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到队列中存在空间。</li><li>超时值 （0x0000001 到 0xFFFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待队列中的房间时保持挂起的计时器刻度的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功发送消息。</li><li>TX_DELETED时，已删除消息队列 （0x01） 消息队列。</li><li>TX_QUEUE_FULL （0x0B） 服务无法发送消息，因为队列在指定等待的持续时间内已满。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_QUEUE_ERROR （0x09） 无效消息队列指针。</li><li>TX_PTR_ERROR （0x03） 消息的无效源指针。</li><li>TX_WAIT_ERROR （0x04） 在从非TX_NO_WAIT的呼叫上指定的等待选项（非线程） 以外的等待选项。</li></ul><h3 id="tx-queue-send-notify"><a href="#tx-queue-send-notify" class="headerlink" title="tx_queue_send_notify"></a>tx_queue_send_notify</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_queue_send_notify</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span>queue_ptr<span class="token punctuation">,</span>    <span class="token function">VOID</span> <span class="token punctuation">(</span><span class="token operator">*</span>queue_send_notify<span class="token punctuation">)</span><span class="token punctuation">(</span>TX_QUEUE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>queue_ptr    指向以前创建的队列的指针。</li><li>queue_send_notify    指向应用程序的队列发送通知函数的指针。如果此值为TX_NULL，则禁用通知。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功注册队列发送通知。</li><li>TX_QUEUE_ERROR （0x09） 无效队列指针。</li><li>TX_FEATURE_NOT_ENABLED （0xFF） 系统已编译，并禁用了通知功能。</li></ul><h2 id="Queue-demo"><a href="#Queue-demo" class="headerlink" title="Queue_demo"></a>Queue_demo</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * Queue_demo.c * Change Logs: * Date           Author       Notes * 2020年8月28日           henji      the first version */</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD MyThread_1<span class="token punctuation">;</span>TX_THREAD MyThread_2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*线程栈大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_STACK_SIZE 1024</span><span class="token comment" spellcheck="true">/*内存池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BYTE_POOL_SIZE 1024*5</span><span class="token comment" spellcheck="true">/*内存块池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BLOCK_POOL_SIZE 100</span><span class="token comment" spellcheck="true">/*内存字节池控制块*/</span>TX_BYTE_POOL byte_pool_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 指向内存的指针 */</span>UCHAR <span class="token operator">*</span>memory_ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 消息队列 */</span>TX_QUEUE my_queue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token comment" spellcheck="true">/* Infinite loop */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MyThread_1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG status<span class="token punctuation">;</span>    INT thread_1_send <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    INT special_send <span class="token operator">=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span>    CHAR buf_send<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 紧急消息 */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>thread_1_send <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token function">tx_queue_front_send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_queue<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//消息队列控制块</span>                                         <span class="token operator">&amp;</span>special_send<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//发送消息内容指针</span>                                         TX_WAIT_FOREVER <span class="token comment" spellcheck="true">//无限等待</span>                                         <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf_send<span class="token punctuation">,</span><span class="token string">"special_send %c "</span><span class="token punctuation">,</span>special_send<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>buf_send<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf_send<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>thread_1_send <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 到 'I' 的时候就结束进程  */</span>            <span class="token function">tx_thread_terminate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token function">tx_queue_send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_queue<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//消息队列控制块</span>                                   <span class="token operator">&amp;</span>thread_1_send<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//发送消息内容指针</span>                                   TX_WAIT_FOREVER <span class="token comment" spellcheck="true">//无限等待</span>                                   <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf_send<span class="token punctuation">,</span><span class="token string">"thread_1_send %c "</span><span class="token punctuation">,</span>thread_1_send<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>buf_send<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf_send<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        thread_1_send<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MyThread_2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>        ULONG status<span class="token punctuation">;</span>        INT thread_2_received<span class="token punctuation">;</span>        CHAR buf_rec<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token function">tx_queue_receive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_queue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//消息队列控制块</span>                                      <span class="token operator">&amp;</span>thread_2_received<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//发送消息内容指针</span>                                      TX_WAIT_FOREVER <span class="token comment" spellcheck="true">//无限等待</span>                                  <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">sprintf</span><span class="token punctuation">(</span>buf_rec<span class="token punctuation">,</span><span class="token string">"thread_2_received %c "</span><span class="token punctuation">,</span>thread_2_received<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>buf_rec<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf_rec<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*使能追踪*/</span>    trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span>registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建一个内存池用于分配线程栈*/</span>    <span class="token function">tx_byte_pool_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token string">"byte pool 0"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//名称</span>            first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分配内存地址</span>            DEMO_BYTE_POOL_SIZE<span class="token comment" spellcheck="true">//分配内存池大小</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程1*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"MyThread_1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            MyThread_1_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级1 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程2*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"MyThread_2"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            MyThread_2_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个空间用于消息队列*/</span>        <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//内存池的指针</span>                <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                <span class="token number">100</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//分配消息队列大小 100字节</span>                TX_NO_WAIT <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 创建消息队列 */</span>        <span class="token function">tx_queue_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_queue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//消息队列控制块</span>                <span class="token string">"my_queue"</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//消息队列名称</span>                <span class="token number">4</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">//每一个消息大小</span>                memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//消息队列地址</span>                <span class="token number">100</span>                   <span class="token comment" spellcheck="true">//总大小100</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>thread_1 发送 ‘A’ —&gt; ‘H’   【500 ticks】</p><p>thread_1 发送 ‘C’ 的时候转变位紧急消息 </p><p>thread_1 发送 ‘I’ 的时候终止进程    </p><p>thread_2 接受     【2000 ticks】</p><p><img src="https://img-blog.csdnimg.cn/20200828203932261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200828204913469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/2020082820493934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(八)---事件集Event</title>
      <link href="/2020/08/28/threadx-ba-shi-jian-ji-event/"/>
      <url>/2020/08/28/threadx-ba-shi-jian-ji-event/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>tx_event_flags_create</li><li>tx_event_flags_delete</li><li>tx_event_flags_get</li><li>tx_event_flags_set</li><li>tx_event_flags_set_notify</li></ul><h3 id="tx-event-flags-create"><a href="#tx-event-flags-create" class="headerlink" title="tx_event_flags_create"></a>tx_event_flags_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_event_flags_create</span><span class="token punctuation">(</span>TX_EVENT_FLAGS_GROUP <span class="token operator">*</span>group_ptr<span class="token punctuation">,</span>    CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>group_ptr指向事件标志组控件块的指针。</li><li>name_ptr指向事件标志组的名称。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建事件组。</li><li>TX_GROUP_ERROR （0x06） 无效事件组指针。指针为 NULL 或已创建事件组。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-event-flags-delete"><a href="#tx-event-flags-delete" class="headerlink" title="tx_event_flags_delete"></a>tx_event_flags_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_event_flags_delete</span><span class="token punctuation">(</span>TX_EVENT_FLAGS_GROUP <span class="token operator">*</span>group_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>group_ptr指向以前创建的事件标志组。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功事件标志组删除。</li><li>TX_GROUP_ERROR （0x06） 无效事件标志组指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-event-flags-get"><a href="#tx-event-flags-get" class="headerlink" title="tx_event_flags_get"></a>tx_event_flags_get</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_event_flags_get</span><span class="token punctuation">(</span>TX_EVENT_FLAGS_GROUP <span class="token operator">*</span>group_ptr<span class="token punctuation">,</span>    ULONG requested_flags<span class="token punctuation">,</span> UINT get_option<span class="token punctuation">,</span>    ULONG <span class="token operator">*</span>actual_flags_ptr<span class="token punctuation">,</span> ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li><p>group_ptr 指向以前创建的事件标志组。</p></li><li><p>requested_flags 32 位未签名的变量，表示请求的事件标志。</p></li><li><p>get_option 指定是否需要所有或任何请求的事件标志。以下是有效的选择：</p></li></ul><ol><li>TX_AND （0x02）</li><li>TX_AND_CLEAR （0x03）</li><li>TX_OR （0x00）</li><li>TX_OR_CLEAR （0x01）</li></ol><p>选择TX_AND或TX_AND_CLEAR指定组中必须存在所有事件标志。选择TX_OR或TX_OR_CLEAR指定任何事件标志令人满意。如果指定了请求或更改，则清除满足请求TX_AND_CLEAR（TX_OR_CLEAR为零）。</p><ul><li>actual_flags_ptr 指向检索到的事件标志放置位置的目标。请注意，获得的实际标志可能包含未请求的标志。</li><li>wait_option定义未设置所选事件标志时服务的行为方式。等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从非线程调用服务，则这是唯一有效的选项;例如，初始化、计时器或 ISR。</li><li>TX_WAIT_FOREVER超时值 （0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到事件标志可用。</li><li>超时值 （0x0000001 到 0xFFFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待事件标志时保持挂起计时器的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功事件标志。</li><li>TX_DELETED时，删除了第 0x01 个事件标志组。</li><li>TX_NO_EVENTS （0x07） 服务无法在指定时间内获取指定的事件等待。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_GROUP_ERROR （0x06） 无效事件标志组指针。</li><li>TX_PTR_ERROR事件标志的”0x03”无效指针。</li><li>TX_WAIT_ERROR （0x04） 在从非TX_NO_WAIT的呼叫上指定的等待选项（非线程） 以外的等待选项。</li><li>TX_OPTION_ERROR （0x08） 无效获取选项。</li></ul><h3 id="tx-event-flags-set"><a href="#tx-event-flags-set" class="headerlink" title="tx_event_flags_set"></a>tx_event_flags_set</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_event_flags_set</span><span class="token punctuation">(</span>TX_EVENT_FLAGS_GROUP <span class="token operator">*</span>group_ptr<span class="token punctuation">,</span>    ULONG flags_to_set<span class="token punctuation">,</span>UINT set_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li><p>group_ptr 指向以前创建的事件标志组控件块的指针。</p></li><li><p>flags_to_set 指定要根据所选的设置选项设置或清除的事件标志。</p></li><li><p>set_option 指定的事件标志是 ANDed 还是 ORed 进入组的当前事件标志。<br>以下是有效的选择：</p></li></ul><ol><li>TX_AND （0x02）</li><li>TX_OR （0x00）<br>选择TX_AND指定指定的事件标志和ed 到组中的当前事件标志。此选项通常用于清除组中的事件标志。否则，如果TX_OR，指定的事件标志将用组中的当前事件进行 OR ed。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功事件标志集。</li><li>TX_GROUP_ERROR （0x06） 到事件标志组的无效指针。</li><li>TX_OPTION_ERROR （0x08） 指定的无效设置选项。</li></ul><h3 id="tx-event-flags-set-notify"><a href="#tx-event-flags-set-notify" class="headerlink" title="tx_event_flags_set_notify"></a>tx_event_flags_set_notify</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_event_flags_set_notify</span><span class="token punctuation">(</span>TX_EVENT_FLAGS_GROUP <span class="token operator">*</span>group_ptr<span class="token punctuation">,</span>    <span class="token function">VOID</span> <span class="token punctuation">(</span><span class="token operator">*</span>events_set_notify<span class="token punctuation">)</span><span class="token punctuation">(</span>TX_EVENT_FLAGS_GROUP <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>group_ptr 指向以前创建的事件标志组。</li><li>events_set_notify 指向应用程序的事件标志设置通知函数。如果此值为TX_NULL，则禁用通知。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功注册事件标志集通知。</li><li>TX_GROUP_ERROR （0x06） 无效事件标志组指针。</li><li>TX_FEATURE_NOT_ENABLED （0xFF） 系统已编译，并禁用了通知功能。</li></ul><h2 id="Event-Flags-demo"><a href="#Event-Flags-demo" class="headerlink" title="Event _Flags_demo"></a>Event _Flags_demo</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * Event _Flags_demo.c * Change Logs: * Date           Author       Notes * 2020年8月25日           henji      the first version */</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD MyThread_1<span class="token punctuation">;</span>TX_THREAD MyThread_2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*线程栈大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_STACK_SIZE 1024</span><span class="token comment" spellcheck="true">/*内存池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BYTE_POOL_SIZE 1024*5</span><span class="token comment" spellcheck="true">/*内存块池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BLOCK_POOL_SIZE 100</span><span class="token comment" spellcheck="true">/*内存字节池控制块*/</span>TX_BYTE_POOL byte_pool_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 指向内存的指针 */</span>UCHAR <span class="token operator">*</span>memory_ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 事件组 */</span>TX_EVENT_FLAGS_GROUP event_flags_0<span class="token punctuation">;</span>UINT count_A <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>UINT count_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>CHAR buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token comment" spellcheck="true">/* Infinite loop */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MyThread_1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    ULONG status<span class="token punctuation">;</span>    ULONG actual_flags<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        status <span class="token operator">=</span> <span class="token function">tx_event_flags_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件控制块</span>                                         <span class="token number">0x00000111</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//事件1、4、8标志</span>                                   TX_AND_CLEAR<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//事件1、4、8同时置位触发,且清零</span>                                   <span class="token operator">&amp;</span>actual_flags<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//保存复位前的状态</span>                                   <span class="token number">5</span> <span class="token comment" spellcheck="true">//超时2 ticks</span>                                    <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"Event flag: 1 &amp; 4 &amp; 8 "</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Event flag: 1 &amp; 4 &amp; 8 "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">tx_event_flags_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件组控制块</span>                               <span class="token number">0x00000001</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//设置事件1标志位</span>                               TX_OR           <span class="token comment" spellcheck="true">//TX_OR 当前置位</span>                              <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        status <span class="token operator">=</span> <span class="token function">tx_event_flags_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件控制块</span>                                         <span class="token number">0x00000001</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//事件1标志</span>                                   TX_AND_CLEAR<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//事件1置位触发,且不清零</span>                                   <span class="token operator">&amp;</span>actual_flags<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//保存复位前的状态</span>                                   <span class="token number">5</span> <span class="token comment" spellcheck="true">//超时20 ticks</span>                                    <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"Event flag: 1 "</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Event flag: 1 "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">tx_event_flags_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件组控制块</span>                               <span class="token number">0x00000011</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//设置事件1、4标志位</span>                               TX_OR           <span class="token comment" spellcheck="true">//TX_OR 当前置位</span>                              <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MyThread_2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>        ULONG status<span class="token punctuation">;</span>        ULONG actual_flags<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token function">tx_event_flags_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件控制块</span>                                             <span class="token number">0x00000011</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//事件1标志</span>                                       TX_AND_CLEAR<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//事件1置位触发,且清零</span>                                       <span class="token operator">&amp;</span>actual_flags<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//保存复位前的状态</span>                                       <span class="token number">5</span> <span class="token comment" spellcheck="true">//超时2 ticks</span>                                        <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"Event flag: 1 &amp; 4 "</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Event flag: 1 &amp; 4 "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">tx_event_flags_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件组控制块</span>                                   <span class="token number">0x00000111</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//设置事件8标志位</span>                                   TX_OR           <span class="token comment" spellcheck="true">//TX_OR 当前置位</span>                                  <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*使能追踪*/</span>    trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span>registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建一个内存池用于分配线程栈*/</span>    <span class="token function">tx_byte_pool_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token string">"byte pool 0"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//名称</span>            first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分配内存地址</span>            DEMO_BYTE_POOL_SIZE<span class="token comment" spellcheck="true">//分配内存池大小</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程1*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"MyThread_1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            MyThread_1_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级1 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程2*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"MyThread_2"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            MyThread_2_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 创建事件组 */</span>    <span class="token function">tx_event_flags_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span><span class="token string">"event flags 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一个事件组包含32个事件,0 ~ 31 */</span>    <span class="token comment" spellcheck="true">/* 一位十六进制 表示 四位二进制 ,也就是说一位十六进制 涵盖了 4 个 事件*/</span>    <span class="token comment" spellcheck="true">/* 0x00000001   表示事件1*/</span>    <span class="token comment" spellcheck="true">/* 0x00000011   表示事件1和4*/</span>    <span class="token comment" spellcheck="true">/* 0x????????*/</span>    <span class="token function">tx_event_flags_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_flags_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//事件组控制块</span>                       <span class="token number">0x00000111</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//设置事件1、4、8标志位</span>                       TX_OR           <span class="token comment" spellcheck="true">//TX_OR 当前置位 、 TX_AND 当前复位 相当于取反事件(除去0、4、8)</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200827224806729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200827224615515.png#pic_center"><br>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(七)---互斥量Mutex</title>
      <link href="/2020/08/28/threadx-qi-hu-chi-liang-mutex/"/>
      <url>/2020/08/28/threadx-qi-hu-chi-liang-mutex/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>除了信号量外，ThreadX还提供了一个互斥对象。 互斥锁基本上是二进制信号量，这意味着一次只有一个线程可以拥有一个互斥锁。 此外，同一线程可以多次对拥有的互斥锁执行一次成功的互斥锁获取操作，确切地说是4,294,967,295。 互斥对象有两个操作：tx_mutex_get和tx_mutex_put。 get操作获取不属于另一个线程的互斥锁，而put操作释放先前获取的互斥锁。 为了使线程释放互斥锁，放置操作的数量必须等于先前的获取操作的数量。</p><p>每个互斥锁都是公共资源。 ThreadX对使用互斥体没有任何限制。</p><p>ThreadX互斥锁仅用于互斥。 与计数信号量不同，互斥锁不能用作事件通知的方法。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>tx_mutex_create</li><li>tx_mutex_delete</li><li>tx_mutex_get</li><li>tx_mutex_put</li></ul><h3 id="tx-mutex-create"><a href="#tx-mutex-create" class="headerlink" title="tx_mutex_create"></a>tx_mutex_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_mutex_create</span><span class="token punctuation">(</span>TX_MUTEX <span class="token operator">*</span>mutex_ptr<span class="token punctuation">,</span>    CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">,</span> UINT priority_inherit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>mutex_ptr指向互斥控制块的指针。</li><li>name_ptr指向互斥器名称的指针。</li><li>priority_inherit指定此互斥是否支持优先级继承。如果此值为TX_INHERIT，则支持优先级继承。但是，如果TX_NO_INHERIT，则此互斥不支持优先级继承。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建静音。</li><li>TX_MUTEX_ERROR （0x1C） 无效的互斥指针。指针为 NULL 或已创建互斥。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li><li>TX_INHERIT_ERROR （0x1F） 无效优先级继承参数。</li></ul><h3 id="tx-mutex-delete"><a href="#tx-mutex-delete" class="headerlink" title="tx_mutex_delete"></a>tx_mutex_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_mutex_delete</span><span class="token punctuation">(</span>TX_MUTEX <span class="token operator">*</span>mutex_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>mutex_ptr指向以前创建的互斥的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功静音删除。</li><li>TX_MUTEX_ERROR （0x1C） 无效的互斥指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-mutex-get"><a href="#tx-mutex-get" class="headerlink" title="tx_mutex_get"></a>tx_mutex_get</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_mutex_get</span><span class="token punctuation">(</span>TX_MUTEX <span class="token operator">*</span>mutex_ptr<span class="token punctuation">,</span> ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>mutex_ptr 指向以前创建的互斥的指针。</li><li>wait_option 定义如果互斥已被另一个线程拥有，服务的行为方式。等待选项的定义如下：<ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从初始化调用服务，则这是唯一有效的选项。</li></ol></li></ul><ol start="2"><li>TX_WAIT_FOREVER超时值 （0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到互斥可用。超时值 （0x0000001 到 0xFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待互斥时保持挂起计时器的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功静音获取操作。</li><li>TX_DELETED （0x01） Mutex 在线程挂起时被删除。</li><li>TX_NOT_AVAILABLE （0x1D） 服务无法在指定时间内获得互斥的所有权以等待。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_MUTEX_ERROR （0x1C） 无效的互斥指针。</li><li>TX_WAIT_ERROR （0x04） 在非线程的TX_NO_WAIT上指定了除其他帐户以外的等待选项。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-mutex-put"><a href="#tx-mutex-put" class="headerlink" title="tx_mutex_put"></a>tx_mutex_put</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_mutex_put</span><span class="token punctuation">(</span>TX_MUTEX <span class="token operator">*</span>mutex_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>mutex_ptr指向以前创建的互斥的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功静音释放。</li><li>TX_NOT_OWNED （0x1E） Mutex 不归呼叫者所有。</li><li>TX_MUTEX_ERROR （0x1C） 到互斥的无效指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h2 id="mutex-demo"><a href="#mutex-demo" class="headerlink" title="mutex_demo"></a>mutex_demo</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * mutex_demo.c * Change Logs: * Date           Author       Notes * 2020年8月25日           henji      the first version */</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD MyThread_1<span class="token punctuation">;</span>TX_THREAD MyThread_2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*线程栈大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_STACK_SIZE 1024</span><span class="token comment" spellcheck="true">/*内存池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BYTE_POOL_SIZE 1024*5</span><span class="token comment" spellcheck="true">/*内存块池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BLOCK_POOL_SIZE 100</span><span class="token comment" spellcheck="true">/*内存字节池控制块*/</span>TX_BYTE_POOL byte_pool_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 指向内存的指针 */</span>UCHAR <span class="token operator">*</span>memory_ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*互斥量    临界区*/</span>TX_MUTEX mutex_lock<span class="token punctuation">;</span>UINT count_A <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>UINT count_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span><span class="token comment" spellcheck="true">/* Private function prototypes -----------------------------------------------*/</span><span class="token keyword">void</span> <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PFP */</span>CHAR buffer<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//my_printf缓冲区 </span><span class="token keyword">void</span> <span class="token function">my_printf</span><span class="token punctuation">(</span>CHAR <span class="token operator">*</span>s<span class="token punctuation">,</span>INT var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PFP */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MyThread_1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*临界区上锁*/</span>    <span class="token comment" spellcheck="true">//    tx_mutex_get(&amp;mutex_lock,TX_WAIT_FOREVER);</span>        <span class="token comment" spellcheck="true">/*临界区 ...*/</span>        count_A <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 让给线程2 使得count_A &amp; count_B 不同步 */</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count_B <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*临界区释放锁*/</span>    <span class="token comment" spellcheck="true">//    tx_mutex_put(&amp;mutex_lock);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MyThread_2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*临界区上锁*/</span>    <span class="token comment" spellcheck="true">//    tx_mutex_get(&amp;mutex_lock,TX_WAIT_FOREVER);</span>        <span class="token comment" spellcheck="true">/*临界区 ...*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count_A <span class="token operator">==</span> count_B<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">my_printf</span><span class="token punctuation">(</span><span class="token string">"count_A = count_B"</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">my_printf</span><span class="token punctuation">(</span><span class="token string">"count_A != count_B"</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count_A <span class="token operator">++</span><span class="token punctuation">;</span>        count_B <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*临界区释放锁*/</span>    <span class="token comment" spellcheck="true">//    tx_mutex_put(&amp;mutex_lock);</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*使能追踪*/</span>    trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span>registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建一个内存池用于分配线程栈*/</span>    <span class="token function">tx_byte_pool_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token string">"byte pool 0"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//名称</span>            first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分配内存地址</span>            DEMO_BYTE_POOL_SIZE<span class="token comment" spellcheck="true">//分配内存池大小</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程1*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"MyThread_1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            MyThread_1_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程2*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyThread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"MyThread_2"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            MyThread_2_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级1 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建互斥量 临界区 */</span>    <span class="token function">tx_mutex_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_lock<span class="token punctuation">,</span><span class="token string">"mutex_lock"</span><span class="token punctuation">,</span>TX_NO_INHERIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">my_printf</span><span class="token punctuation">(</span>CHAR <span class="token operator">*</span>s<span class="token punctuation">,</span>INT var<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>var <span class="token operator">==</span> HAL_MAX_DELAY<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>s<span class="token punctuation">,</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有使用互斥量的时候，在线程1 tx_thread_sleep(1000); 挂起的时候,线程2操作变量使得 count_A 与 count_B 不同步</p><p><img src="https://img-blog.csdnimg.cn/20200827192012559.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200827195035956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>使用互斥量，保护共享资源，防止其它线程的破坏</p><p><img src="https://img-blog.csdnimg.cn/20200827192548651.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200827194558535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(六) ------ 信号量semaphore</title>
      <link href="/2020/08/26/threadx-liu-xin-hao-liang-semaphore/"/>
      <url>/2020/08/26/threadx-liu-xin-hao-liang-semaphore/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThreadX提供32位计数信号量，范围在0到4,294,967,295之间。 有两种用于计数信号量的操作：tx_semaphore_get和tx_semaphore_put。 get操作将信号量减一。 如果信号量为0，则get操作不会成功。 与get操作相反的是put操作。 它使信号量增加一。<br>每个计数信号量都是公共资源。 ThreadX对如何使用计数信号量没有任何限制。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>tx_semaphore_create</li><li>tx_semaphore_delete</li><li>tx_semaphore_get</li><li>tx_semaphore_put</li><li>tx_semaphore_put_notify</li></ul><h3 id="tx-semaphore-create"><a href="#tx-semaphore-create" class="headerlink" title="tx_semaphore_create"></a>tx_semaphore_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_semaphore_create</span><span class="token punctuation">(</span>TX_SEMAPHORE <span class="token operator">*</span>semaphore_ptr<span class="token punctuation">,</span>    CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">,</span> ULONG initial_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>semaphore_ptr指向信号量控件块的指针。</li><li>name_ptr指向信号量名称的指针。</li><li>initial_count指定此信号量的初始计数。法律值的范围为 0x000000000 到 0xFFFF。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建信号量。</li><li>TX_SEMAPHORE_ERROR （0x0C） 无效信号量指针。指针为 NULL 或已创建信号量。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-semaphore-delete"><a href="#tx-semaphore-delete" class="headerlink" title="tx_semaphore_delete"></a>tx_semaphore_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_semaphore_delete</span><span class="token punctuation">(</span>TX_SEMAPHORE <span class="token operator">*</span>semaphore_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>semaphore_ptr指向以前创建信号量的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功计数信号量删除。</li><li>TX_SEMAPHORE_ERROR （0x0C） 无效计数信号量指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h3 id="tx-semaphore-get"><a href="#tx-semaphore-get" class="headerlink" title="tx_semaphore_get"></a>tx_semaphore_get</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_semaphore_get</span><span class="token punctuation">(</span>TX_SEMAPHORE <span class="token operator">*</span>semaphore_ptr<span class="token punctuation">,</span>    ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>semaphore_ptr    指向以前创建的计数信号量。</li><li>wait_option 定义服务的行为方式（如果没有可用的信号量实例）;<br>即，信号量计数为零。等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从非线程调用服务，则这是唯一有效的选项;例如，初始化、计时器或 ISR。</li><li>TX_WAIT_FOREVER （0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到信号量实例可用。<br>超时值 （0x0000001 到 0xFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待信号量实例时保持挂起计时器的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功检索信号量实例。</li><li>TX_DELETED （0x01） 计数信号量在线程挂起时被删除。</li><li>TX_NO_INSTANCE （0x0D） 服务无法检索计数信号量的实例（信号量计数在指定等待时间内为零）。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_SEMAPHORE_ERROR （0x0C） 无效计数信号量指针。</li><li>TX_WAIT_ERROR （0x04） 在非线程的TX_NO_WAIT上指定了除其他帐户以外的等待选项。</li></ul><h3 id="tx-semaphore-put"><a href="#tx-semaphore-put" class="headerlink" title="tx_semaphore_put"></a>tx_semaphore_put</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_semaphore_put</span><span class="token punctuation">(</span>TX_SEMAPHORE <span class="token operator">*</span>semaphore_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>semaphore_ptr指向以前创建的计数信号量控件块的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功放入信号量。</li><li>TX_SEMAPHORE_ERROR （0x0C） 到计数信号量的无效指针。</li></ul><h3 id="tx-semaphore-put-notify"><a href="#tx-semaphore-put-notify" class="headerlink" title="tx_semaphore_put_notify"></a>tx_semaphore_put_notify</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_semaphore_put_notify</span><span class="token punctuation">(</span>TX_SEMAPHORE <span class="token operator">*</span>semaphore_ptr<span class="token punctuation">,</span>    <span class="token function">VOID</span> <span class="token punctuation">(</span><span class="token operator">*</span>semaphore_put_notify<span class="token punctuation">)</span><span class="token punctuation">(</span>TX_SEMAPHORE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>semaphore_ptr指向以前创建信号量的指针。</li><li>semaphore_put_notify指向应用程序信号量 put 通知函数的指针。如果此值为TX_NULL，则禁用通知。</li><li></li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功注册信号量放通知。</li><li>TX_SEMAPHORE_ERROR （0x0C） 无效信号量指针。</li><li>TX_FEATURE_NOT_ENABLED （0xFF） 系统已编译，并禁用了通知功能。</li></ul><h2 id="semaphore-demo"><a href="#semaphore-demo" class="headerlink" title="semaphore_demo"></a>semaphore_demo</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * semaphore_demo.c * Change Logs: * Date        Author        Notes * 2020年8月22日    henji        the first version */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* Private includes ----------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE END Includes */</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD Producer<span class="token punctuation">;</span>TX_THREAD Consumer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*线程栈大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_STACK_SIZE 1024</span><span class="token comment" spellcheck="true">/*内存池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BYTE_POOL_SIZE 1024*5</span><span class="token comment" spellcheck="true">/*内存块池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BLOCK_POOL_SIZE 100</span><span class="token comment" spellcheck="true">/*内存字节池控制块*/</span>TX_BYTE_POOL byte_pool_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 指向内存的指针 */</span>UCHAR <span class="token operator">*</span>memory_ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*信号量  空的篮子*/</span>TX_SEMAPHORE sem_empty<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*信号量  临界区*/</span>TX_SEMAPHORE sem_lock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*信号量  满的篮子*/</span>TX_SEMAPHORE sem_full<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*信号量状态*/</span>UINT status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token comment" spellcheck="true">/* Infinite loop */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN 4 */</span><span class="token keyword">void</span> <span class="token function">producer_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*获取空篮子信号量*/</span>        status <span class="token operator">=</span> <span class="token function">tx_semaphore_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_empty<span class="token punctuation">,</span> TX_WAIT_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*获取空篮子成功*/</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*临界区上锁*/</span>        <span class="token function">tx_semaphore_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_lock<span class="token punctuation">,</span> TX_WAIT_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*临界区   生产者生产*/</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"Producing..."</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Producing..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*临界区释放锁*/</span>        <span class="token function">tx_semaphore_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*释放满篮子信号量*/</span>        <span class="token function">tx_semaphore_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_full<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">consumer_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*获取满篮子信号量*/</span>        status <span class="token operator">=</span> <span class="token function">tx_semaphore_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_full<span class="token punctuation">,</span> TX_WAIT_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*获取满篮子成功*/</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*临界区上锁*/</span>        <span class="token function">tx_semaphore_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_lock<span class="token punctuation">,</span> TX_WAIT_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*临界区 消费者消费*/</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"Consuming..."</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Consuming..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*临界区释放锁*/</span>        <span class="token function">tx_semaphore_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*释放空篮子信号量*/</span>        <span class="token function">tx_semaphore_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*使能追踪*/</span>    trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span>registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建一个内存池用于分配线程栈*/</span>    <span class="token function">tx_byte_pool_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token string">"byte pool 0"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//名称</span>            first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分配内存地址</span>            DEMO_BYTE_POOL_SIZE<span class="token comment" spellcheck="true">//分配内存池大小</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程1*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Producer<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            producer_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程2*/</span>    <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>            <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>            TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Consumer<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread2"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            consumer_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级2 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 篮子数量一个 */</span>    <span class="token comment" spellcheck="true">/*创建信号量 空的篮子 */</span>    <span class="token function">tx_semaphore_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_empty<span class="token punctuation">,</span> <span class="token string">"sem_empty"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建信号量 满的篮子 */</span>    <span class="token function">tx_semaphore_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_full<span class="token punctuation">,</span> <span class="token string">"sem_full"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建信号量 临界区 */</span>    <span class="token function">tx_semaphore_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem_lock<span class="token punctuation">,</span> <span class="token string">"sem_lock"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200823142222128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX &amp; STM32</title>
      <link href="/2020/08/26/threadx-stm32/"/>
      <url>/2020/08/26/threadx-stm32/</url>
      
        <content type="html"><![CDATA[<p><a href="/2020/07/29/stm32cubeide-shi-yong-openocd-debug/">STM32CubeIDE 使用OpenOCD debug</a><br><a href="/2020/08/12/threadx-yi-chu-shi/">ThreadX(一) —— 初识</a><br><a href="/2020/08/13/threadx-er-yi-zhi-dao-stm32/">ThreadX(二) —— 移植到STM32</a><br><a href="/2020/08/14/threadx-san-xian-cheng-thread/">ThreadX(三) —— 线程thread</a><br><a href="/2020/08/22/threadx-si-tracex-shi-yong/">ThreadX(四) —— TraceX使用</a><br><a href="/2020/08/26/threadx-wu-nei-cun-memory/">ThreadX(五) —— 内存Memory</a><br><a href="/2020/08/26/threadx-liu-xin-hao-liang-semaphore/">ThreadX(六) —— 信号量semaphore</a><br><a href="/2020/08/28/threadx-qi-hu-chi-liang-mutex/">ThreadX(七) —— 互斥量Mutex</a><br><a href="/2020/08/28/threadx-ba-shi-jian-ji-event/">ThreadX(八) —— 事件集Event</a><br><a href="/2020/08/28/threadx-jiu-xiao-xi-dui-lie-queue/">ThreadX(九) —— 消息队列Queue</a><br><a href="/2020/08/28/threadx-shi-ding-shi-qi-time/">ThreadX(十) —— 定时器TIME</a><br><a href="/2020/08/30/threadx-er-yi-zhi-dao-stm32-keil/">ThreadX(二) —— 移植到STM32(Keil)</a></p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(五)------内存管理</title>
      <link href="/2020/08/26/threadx-wu-nei-cun-memory/"/>
      <url>/2020/08/26/threadx-wu-nei-cun-memory/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><hr><ul><li>tx_block_allocate</li><li>tx_block_pool_create</li><li>tx_block_pool_delete</li><li>tx_block_pool_info_get</li><li>tx_block_pool_performance_info_get</li><li>tx_block_pool_performance_system_info_get</li><li>tx_block_pool_prioritize</li><li>tx_block_release</li></ul><hr><ul><li>tx_byte_allocate</li><li>tx_byte_pool_create</li><li>tx_byte_pool_delete</li><li>tx_byte_pool_info_get</li><li>tx_byte_pool_performance_info_get</li><li>tx_byte_pool_performance_system_info_get</li><li>tx_byte_pool_prioritize</li><li>tx_byte_release</li></ul><hr><h3 id="tx-block-allocate"><a href="#tx-block-allocate" class="headerlink" title="tx_block_allocate"></a>tx_block_allocate</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_block_allocate</span><span class="token punctuation">(</span>TX_BLOCK_POOL <span class="token operator">*</span>pool_ptr<span class="token punctuation">,</span> VOID <span class="token operator">*</span><span class="token operator">*</span>block_ptr<span class="token punctuation">,</span>    ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>pool_ptr 指向以前创建的内存块池的指针。</li><li>block_ptr 指向目标块指针的指针。成功分配时，分配的内存块的地址将放置在此参数点的位置。</li><li>wait_option 定义服务在没有可用的内存块时的行为方式。<br>等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x0x0000000） - TX_NO_WAIT，无论它成功与否，都会立即从该服务返回。如果从非线程调用服务，则这是唯一有效的选项;例如，初始化、计时器或 ISR。</li><li>TX_WAIT_FOREVER （0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到内存块可用。<br>超时值（0x0000001 到 0xFFFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待内存块时保持挂起计时器的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功的内存块分配。</li><li>TX_DELETED时，已删除内存块池 （0x01） 内存块池。</li><li>TX_NO_MEMORY （0x10） 服务无法在指定时间内分配内存块以等待。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_POOL_ERROR （0x02） 无效内存块池指针。</li><li>TX_WAIT_ERROR （0x04） 在从非TX_NO_WAIT的呼叫上指定的等待选项（非线程） 以外的等待选项。</li><li>TX_PTR_ERROR （0x03） 到目标指针的无效指针。</li></ul><h3 id="tx-block-pool-create"><a href="#tx-block-pool-create" class="headerlink" title="tx_block_pool_create"></a>tx_block_pool_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_block_pool_create</span><span class="token punctuation">(</span>TX_BLOCK_POOL pool_ptr<span class="token punctuation">,</span>  CHAR name_ptr<span class="token punctuation">,</span> ULONG block_size<span class="token punctuation">,</span>  VOID pool_start<span class="token punctuation">,</span> ULONG pool_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>pool_ptr指向内存块池控件块的指针。</li><li>name_ptr指向内存块池的名称的指针。</li><li>block_size每个内存块中的字节数。</li><li>pool_start内存块池的起始地址。起始地址必须与 ULONG 数据类型的大小对齐。</li><li>pool_size内存块池可用的字节总数。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建内存块池。</li><li>TX_POOL_ERROR （0x02） 无效内存块池指针。指针为 NULL 或已创建池。</li><li>TX_PTR_ERROR （0x03） 池的无效起始地址。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li><li>TX_SIZE_ERROR （0x05） 池的大小无效。</li></ul><h3 id="tx-block-pool-delete"><a href="#tx-block-pool-delete" class="headerlink" title="tx_block_pool_delete"></a>tx_block_pool_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_block_pool_delete</span><span class="token punctuation">(</span>TX_BLOCK_POOL <span class="token operator">*</span>pool_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-<strong>参数</strong> </p><ul><li>pool_ptr指向以前创建的内存块池的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功删除内存块池。</li><li>TX_POOL_ERROR （0x02） 无效内存块池指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h3 id="tx-block-release"><a href="#tx-block-release" class="headerlink" title="tx_block_release"></a>tx_block_release</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_block_release</span><span class="token punctuation">(</span>VOID <span class="token operator">*</span>block_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>block_ptr指向以前分配的内存块的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功释放内存块。</li><li>TX_PTR_ERROR （0x03） 内存块的无效指针。</li></ul><hr><h3 id="tx-byte-allocate"><a href="#tx-byte-allocate" class="headerlink" title="tx_byte_allocate"></a>tx_byte_allocate</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span>TX_BYTE_POOL <span class="token operator">*</span>pool_ptr<span class="token punctuation">,</span>  VOID <span class="token operator">*</span><span class="token operator">*</span>memory_ptr<span class="token punctuation">,</span> ULONG memory_size<span class="token punctuation">,</span>  ULONG wait_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>pool_ptr   指向以前创建的内存块池的指针。</li><li>memory_ptr 指向目标内存指针的指针。成功分配时，分配的内存区域的地址将放置在此参数指向的位置。</li><li>memory_size 请求的字节数。</li><li>wait_option 定义服务在可用内存不足时的行为方式。<br>等待选项的定义如下：</li></ul><ol><li>TX_NO_WAIT （0x00000000） - TX_NO_WAIT，无论它是否成功，都会立即从该服务返回。如果从初始化调用服务，这是唯一有效的选项。</li><li>TX_WAIT_FOREVER 0xFFFF） - TX_WAIT_FOREVER，这将导致调用线程无限期挂起，直到有足够的内存可用。<br>超时值（0x0000001 到 0xFFFFFE） - 选择数值 （1-0xFFFFFFFE） 指定在等待内存时保持挂起计时器刻度的最大数量。</li></ol><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功分配内存。</li><li>TX_DELETED时，已删除内存池 （0x01） 内存池。</li><li>TX_NO_MEMORY （0x10） 服务无法在指定时间内分配内存以等待。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_POOL_ERROR （0x02） 无效内存池指针。</li><li>TX_PTR_ERROR （0x03） 到目标指针的无效指针。</li><li>TX_SIZE_ERROR （0X05） 请求的大小为零或大于池。</li><li>TX_WAIT_ERROR （0x04） 在从非TX_NO_WAIT的呼叫上指定的等待选项（非线程） 以外的等待选项。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h3 id="tx-byte-pool-create"><a href="#tx-byte-pool-create" class="headerlink" title="tx_byte_pool_create"></a>tx_byte_pool_create</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_byte_pool_create</span><span class="token punctuation">(</span>TX_BYTE_POOL <span class="token operator">*</span>pool_ptr<span class="token punctuation">,</span>  CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">,</span> VOID <span class="token operator">*</span>pool_start<span class="token punctuation">,</span>  ULONG pool_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>pool_ptr指向内存池控件块的指针。</li><li>name_ptr指向内存池名称的指针。</li><li>pool_start内存池的起始地址。起始地址必须与 ULONG 数据类型的大小对齐。</li><li>pool_size可用于内存池的字节总数。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建内存池。</li><li>TX_POOL_ERROR （0x02） 无效内存池指针。指针为 NULL 或已创建池。</li><li>TX_PTR_ERROR （0x03） 池的无效起始地址。</li><li>TX_SIZE_ERROR （0x05） 池的大小无效。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h3 id="tx-byte-pool-delete"><a href="#tx-byte-pool-delete" class="headerlink" title="tx_byte_pool_delete"></a>tx_byte_pool_delete</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_byte_pool_delete</span><span class="token punctuation">(</span>TX_BYTE_POOL <span class="token operator">*</span>pool_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>pool_ptr指向以前创建的内存池的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功删除内存池。</li><li>TX_POOL_ERROR （0x02） 无效内存池指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h3 id="tx-byte-release"><a href="#tx-byte-release" class="headerlink" title="tx_byte_release"></a>tx_byte_release</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_byte_release</span><span class="token punctuation">(</span>VOID <span class="token operator">*</span>memory_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数</strong></p><ul><li>memory_ptr指向以前分配的内存区域的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功释放内存。</li><li>TX_PTR_ERROR （0x03） 无效内存区域指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h3 id="memory-demo"><a href="#memory-demo" class="headerlink" title="memory_demo"></a>memory_demo</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * tracex_demo.c * Change Logs: * Date        Author        Notes * 2020年8月25日    henji        the first version */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* Private includes ----------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE END Includes */</span><span class="token comment" spellcheck="true">/* Private variables ---------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD my_thread_1<span class="token punctuation">;</span>TX_THREAD my_thread_2<span class="token punctuation">;</span>TX_THREAD trace_thread<span class="token punctuation">;</span>uint8_t pData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"=========ThreadX=========\n"</span><span class="token punctuation">;</span>uint8_t pData1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am thread1 "</span><span class="token punctuation">;</span>uint8_t pData2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am thread2 "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*线程栈大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_STACK_SIZE 1024</span><span class="token comment" spellcheck="true">/*内存池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BYTE_POOL_SIZE 1024*5</span><span class="token comment" spellcheck="true">/*内存块池总大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> DEMO_BLOCK_POOL_SIZE 100</span><span class="token comment" spellcheck="true">/*内存字节池控制指针*/</span>TX_BYTE_POOL byte_pool_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*内存块池控制指针*/</span>TX_BLOCK_POOL block_pool_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 指向内存的指针 */</span>UCHAR <span class="token operator">*</span>memory_ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN 4 */</span><span class="token keyword">void</span> <span class="token function">thread1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    INT count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uint8_t init_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"start now"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> init_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>init_data<span class="token punctuation">)</span><span class="token punctuation">,</span>            HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData1<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">HAL_GPIO_TogglePin</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> GPIO_PIN_7 <span class="token operator">|</span> GPIO_PIN_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thread2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    INT count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*分配一个内存块空间*/</span>             <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>                                <span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                              DEMO_BLOCK_POOL_SIZE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分配内存块区域</span>                              TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>                              <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*创建内存块*/</span>             <span class="token function">tx_block_pool_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block_pool_0<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//内存块池的指针</span>                                    <span class="token string">"block pool 0"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//内存块池名称</span>                                 <span class="token number">10</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">//每块大小</span>                                 memory_ptr<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                                 DEMO_BLOCK_POOL_SIZE<span class="token comment" spellcheck="true">//内存块池总字节数</span>                                 <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*分配内存块*/</span>             <span class="token function">tx_block_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block_pool_0<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//内存块池的指针</span>                      <span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                               TX_NO_WAIT <span class="token comment" spellcheck="true">//  无论它成功与否，都会立即从该服务返回</span>                                   <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*释放*/</span>             <span class="token function">tx_block_release</span><span class="token punctuation">(</span>memory_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">trace_thread_input</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*使能追踪*/</span>        trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span> registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trace_status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能成功</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trace_status <span class="token operator">==</span> TX_NOT_DONE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在追踪</span>        <span class="token punctuation">}</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 追踪 */</span>    trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span> registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建一个内存池用于分配线程栈*/</span>    <span class="token function">tx_byte_pool_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//内存池的指针</span>                    <span class="token string">"byte pool 0"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//名称</span>                    first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分配内存地址</span>                    DEMO_BYTE_POOL_SIZE <span class="token comment" spellcheck="true">//分配内存池大小</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于trace*/</span>     <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>                        <span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                      DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>                      TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*trace 线程*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_thread<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"trace_thread"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//线程名字</span>            trace_thread_input<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">1</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">//优先级2 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START    <span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程1*/</span>     <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>                        <span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                      DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>                      TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread1"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程名字</span>            thread1_entry<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">3</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START    <span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*分配一个栈空间用于线程2*/</span>     <span class="token function">tx_byte_allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_pool_0<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//内存池的指针</span>                        <span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>memory_ptr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向目标内存指针的指针</span>                      DEMO_STACK_SIZE<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//分配栈大小</span>                      TX_NO_WAIT           <span class="token comment" spellcheck="true">//无论它是否成功，都会立即从该服务返回</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread2"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程名字</span>            thread2_entry<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//线程入口参数</span>            memory_ptr<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//线程的起始地址</span>            DEMO_STACK_SIZE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程栈大小 K</span>            <span class="token number">2</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">//优先级2 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">2</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START    <span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200822230207756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(四)------TraceX使用</title>
      <link href="/2020/08/22/threadx-si-tracex-shi-yong/"/>
      <url>/2020/08/22/threadx-si-tracex-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Azure RTOS TraceX是一个Microsoft系统分析工具，它显示由运行在嵌入式目标上的ThreadX收集的系统事件信息。用户负责将存储在嵌入式目标中RAM中的跟踪缓冲区转移到主机上的二进制文件中。然后，用户可以使用TraceX打开此文件，并以图形方式分析目标事件，诊断系统问题并调整工作的应用程序以提高性能和资源管理。</p><h2 id="TraceX-软件"><a href="#TraceX-软件" class="headerlink" title="TraceX 软件"></a>TraceX 软件</h2><p><a href="http://www.armbbs.cn/forum.php?mod=attachment&aid=NjA0NzV8M2YzZDY3MTh8MTU5NzkyNzgzNHwzMDQ3M3w5NzkyNQ==" target="_blank" rel="noopener">点击下载：TraceX</a></p><p><img src="https://img-blog.csdnimg.cn/20200821225656893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="Trace-API"><a href="#Trace-API" class="headerlink" title="Trace API"></a>Trace API</h2><ul><li>tx_trace_enable：启用事件跟踪</li><li>tx_trace_event_filter：过滤指定的事件</li><li>tx_trace_event_unfilter：取消过滤指定的事件</li><li>tx_trace_disable：禁用事件跟踪</li><li>tx_trace_isr_enter_insert：插入ISR输入跟踪事件</li><li>tx_trace_isr_exit_insert：插入ISR退出跟踪事件</li><li>tx_trace_buffer_full_notify：注册跟踪缓冲区已满的应用程序回调</li><li>tx_trace_user_event_insert：插入用户事件</li></ul><h3 id="tx-trace-enable"><a href="#tx-trace-enable" class="headerlink" title="tx_trace_enable"></a>tx_trace_enable</h3><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_trace_enable</span> <span class="token punctuation">(</span>VOID <span class="token operator">*</span>trace_buffer_start<span class="token punctuation">,</span>     ULONG trace_buffer_size<span class="token punctuation">,</span> ULONG registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输入参数</strong></p><ul><li>trace_buffer_start：指向用户提供的跟踪缓冲区的开始的指针。</li><li>trace_buffer_size：跟踪缓冲区的内存中的字节总数。跟踪缓冲区越大，它可以存储的条目越多。</li><li>Registry_entries：要保留在跟踪注册表中的应用程序ThreadX对象的数量。注册表用于将对象地址与对象名称相关联。这对于GUI跟踪分析工具非常有用。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS（0x00）成功的事件跟踪启用。</li><li>TX_SIZE_ERROR（0x05）指定的跟踪缓冲区大小太小。它必须足够大以容纳跟踪头，对象注册表和至少一个跟踪条目。</li><li>TX_NOT_DONE（0x20）事件跟踪已启用。</li><li>TX_FEATURE_NOT_ENABLED（0xFF）系统未在启用跟踪的情况下进行编译。</li></ul><h3 id="tx-trace-buffer-full-notify"><a href="#tx-trace-buffer-full-notify" class="headerlink" title="tx_trace_buffer_full_notify"></a>tx_trace_buffer_full_notify</h3><pre class="line-numbers language-c"><code class="language-c">VOID <span class="token function">tx_trace_buffer_full_notify</span> <span class="token punctuation">(</span><span class="token function">VOID</span> <span class="token punctuation">(</span><span class="token operator">*</span>full_buffer_callback<span class="token punctuation">)</span><span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>输入参数</strong></p><ul><li>full_buffer_callback：跟踪缓冲区已满时调用的应用程序函数。NULL值将禁用通知回调。</li></ul><p><strong>example</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">trace_is_full</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>trace_buffer_start<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*停止跟踪 or 另辟buffer*/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 注册回调函数 */</span><span class="token function">tx_trace_buffer_full_notify</span> <span class="token punctuation">(</span>trace_is_full<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.microsoft.com/en-us/azure/rtos/tracex/chapter5#exporting-the-trace-buffer" target="_blank" rel="noopener">具体API详情： 点击访问</a></p><h2 id="生成跟踪buf"><a href="#生成跟踪buf" class="headerlink" title="生成跟踪buf"></a>生成跟踪buf</h2><ol><li>启用宏定义 TX_ENABLE_EVENT_TRACE (一般在tx_user.h内开启，具体的内容在tx_port.h &amp; tx_trace.h）<br>这里直接在tx_port.h里面定义了，源码下tx_user_sample.h(修改为tx_user.h 里面根据需要开启)</li></ol><p><img src="https://img-blog.csdnimg.cn/20200821230851759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200821230923556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ol><li>定义时间戳常量(这里使用的是默认的没改…)</li></ol><p><img src="https://img-blog.csdnimg.cn/20200821231320320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ol><li>调用 tx_trace_enable( )<br>在main.c 中定义好相关参数，然后只要把 tx_trace_enable( ) 放到任意一个线程任务while(1)循环里面，就是实现跟踪了，(这里trace单独一个线程了，以示区分)代码大致入下如下图所示：</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * main.c * Change Logs: * Date        Author        Notes * 2020年8月21日    henji        the first version */</span><span class="token comment" spellcheck="true">/* Private includes ----------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE END Includes */</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD my_thread_1<span class="token punctuation">;</span>TX_THREAD my_thread_2<span class="token punctuation">;</span>TX_THREAD trace_thread<span class="token punctuation">;</span>uint8_t pData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"=========ThreadX=========\n"</span><span class="token punctuation">;</span>uint8_t pData1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am thread1 "</span><span class="token punctuation">;</span>uint8_t pData2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am thread2 "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Tracex使用 */</span><span class="token comment" spellcheck="true">/*跟踪缓冲区的内存大小*/</span><span class="token macro property">#<span class="token directive keyword">define</span> trace_buffer_size 64000</span><span class="token comment" spellcheck="true">/*要保留在跟踪注册表中的应用程序ThreadX对象的数量*/</span><span class="token macro property">#<span class="token directive keyword">define</span> registry_entries 40</span>UCHAR trace_buffer_start<span class="token punctuation">[</span>trace_buffer_size<span class="token punctuation">]</span><span class="token punctuation">;</span>UINT trace_status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN 4 */</span><span class="token keyword">void</span> <span class="token function">thread1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    INT count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uint8_t init_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"start now"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData1<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> init_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>init_data<span class="token punctuation">)</span><span class="token punctuation">,</span>            HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">HAL_GPIO_TogglePin</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> GPIO_PIN_7 <span class="token operator">|</span> GPIO_PIN_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thread2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    INT count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*挂起线程1*/</span>            <span class="token function">tx_thread_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*恢复线程1*/</span>            <span class="token function">tx_thread_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*终止线程1*/</span>            <span class="token function">tx_thread_terminate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*重置线程1*/</span>            <span class="token function">tx_thread_reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*恢复线程1*/</span>            <span class="token function">tx_thread_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*终止线程1*/</span>            <span class="token comment" spellcheck="true">//tx_thread_terminate(&amp;my_thread_1);</span>            <span class="token comment" spellcheck="true">//tx_thread_terminate(&amp;my_thread_2);</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">trace_thread_input</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*使能追踪*/</span>        trace_status <span class="token operator">=</span> <span class="token function">tx_trace_enable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_buffer_start<span class="token punctuation">,</span> trace_buffer_size<span class="token punctuation">,</span> registry_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trace_status <span class="token operator">==</span> TX_SUCCESS<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能成功</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trace_status <span class="token operator">==</span> TX_NOT_DONE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在追踪</span>        <span class="token punctuation">}</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">my_entry_exit_notify</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">,</span> UINT condition<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t entry_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" thread1-entry "</span><span class="token punctuation">;</span>    uint8_t exit_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" thread1-exit "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Determine if the thread was entered or exited. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> TX_THREAD_ENTRY<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Thread entry! */</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> entry_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> TX_THREAD_EXIT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Thread exit! */</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> exit_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            thread1_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址(这里偷懒,没有进行分配,直接使用未用的起始地址)</span>            <span class="token number">1024</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread2"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            thread2_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token operator">+</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址+1024 (-被前面线程用掉了)</span>            <span class="token number">1024</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级2 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*trace 线程*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trace_thread<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"trace_thread"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            trace_thread_input<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token operator">+</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级2 (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程进入和退出时通知*/</span>    <span class="token function">tx_thread_entry_exit_notify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">,</span> my_entry_exit_notify<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导出trx-跟踪文件"><a href="#导出trx-跟踪文件" class="headerlink" title="导出trx 跟踪文件"></a>导出trx 跟踪文件</h3><ol><li>点击debug 进入调试状态 ，运行一会然后暂停，找到trace buffer 内存区，将数据导出。(IDE 有很多 mdk IAR ES ….. 这里还是选择ST公司的STM32CubeIDE , 不为什么，单纯 免费。ES 也免费，毕竟segger公司的，调试仅J-link ,STM32CubeIDE  可以支持OpenOCD 基本上满足 st-link 、 j-link 、DAP 等调试器了 )</li></ol><p><img src="https://img-blog.csdnimg.cn/20200822085215894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200822085455440.png#pic_center"></p><p>Memory  &amp;&amp; Memory Browser 都可以</p><p><img src="https://img-blog.csdnimg.cn/20200822085537871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>首地址只要把鼠标放在上面就可以找到了</p><p><img src="https://img-blog.csdnimg.cn/20200822085849369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>点击导出 export</p><p><img src="https://img-blog.csdnimg.cn/20200822090036142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200822090353417.png#pic_center"></p><h3 id="使用TraceX-导入"><a href="#使用TraceX-导入" class="headerlink" title="使用TraceX 导入"></a>使用TraceX 导入</h3><p><img src="https://img-blog.csdnimg.cn/20200822090706308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>关于tracex更具体使用，就参考<a href="https://docs.microsoft.com/en-us/azure/rtos/tracex/about-this-guide" target="_blank" rel="noopener">官方文档</a>吧</p><p><img src="https://img-blog.csdnimg.cn/20200822090928796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><p>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(三) ------ 线程thread</title>
      <link href="/2020/08/14/threadx-san-xian-cheng-thread/"/>
      <url>/2020/08/14/threadx-san-xian-cheng-thread/</url>
      
        <content type="html"><![CDATA[<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ul><li>tx_thread_create</li><li>tx_thread_delete</li><li>tx_thread_preemption_change</li><li>tx_thread_priority_change</li><li>tx_thread_relinquish</li><li>tx_thread_reset</li><li>tx_thread_resume</li><li>tx_thread_sleep</li><li>tx_thread_suspend</li><li>tx_thread_terminate</li><li>tx_thread_wait_abort </li></ul><h2 id="tx-thread-create"><a href="#tx-thread-create" class="headerlink" title="tx_thread_create"></a>tx_thread_create</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_create</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">,</span>  CHAR <span class="token operator">*</span>name_ptr<span class="token punctuation">,</span> <span class="token function">VOID</span> <span class="token punctuation">(</span><span class="token operator">*</span>entry_function<span class="token punctuation">)</span><span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span><span class="token punctuation">,</span>  ULONG entry_input<span class="token punctuation">,</span> VOID <span class="token operator">*</span>stack_start<span class="token punctuation">,</span>  ULONG stack_size<span class="token punctuation">,</span> UINT priority<span class="token punctuation">,</span>  UINT preempt_threshold<span class="token punctuation">,</span> ULONG time_slice<span class="token punctuation">,</span>  UINT auto_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>thread_ptr指向线程控件块的指针。</li><li>name_ptr指向线程名称的指针。</li><li>entry_function指定线程执行的初始 C 函数。当线程从此条目函数返回时，它将处于已完成状态并无限期挂起。</li><li>entry_input线程首次执行时传递给线程的输入函数的 32 位值。此输入的使用完全由应用程序决定。</li><li>stack_start堆栈内存区域的起始地址。</li><li>stack_size堆栈内存区域中的字节数。线程的堆栈区域必须足够大，以处理其最坏情况下的函数调用嵌套和本地变量使用。</li><li>优先级线程的数字优先级。法律值的范围为 0 到 TX_MAX_PRIORITES-1，其中值 0 表示最高优先级。</li><li>preempt_threshold禁用抢占的最高优先级 （0 到 TX_MAX_PRIORITIES-1））。只有高于此级别的优先级才能抢占此线程。此值必须小于或等于指定的优先级。等于线程优先级的值禁用抢占阈值。</li><li>time_slice允许此线程在获得运行机会之前运行此线程的计时器刻度数。请注意，使用抢占阈值可禁用时间切片。法定时间切片值范围为 1 到 0xFFFF（含）。值TX_NO_TIME_SLICE（值为 0）将禁用此线程的时间切片。</li><li>auto_start指定线程是立即启动还是处于挂起状态。法律选项包括TX_AUTO_START （0x01） 和TX_DONT_START （0x00）。如果TX_DONT_START，应用程序稍后必须调用tx_thread_resume才能运行线程。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功创建线程。</li><li>TX_THREAD_ERROR （0x0E） 无效线程控制指针。指针为 NULL 或线程已创建。</li><li>TX_PTR_ERROR （0x03） 入口点或堆栈区域的无效起始地址无效，通常为 NULL。</li><li>TX_SIZE_ERROR （0x05） 堆栈区域的大小无效。线程必须至少具有TX_MINIMUM_STACK字节。</li><li>TX_PRIORITY_ERROR （0x0F） 无效线程优先级，这是超出范围 （0 到 （TX_MAX_PRIORITIES-1） 的值。</li><li>TX_THRESH_ERROR （0x18） 无效抢占指定。此值必须是小于或等于线程的初始优先级的有效优先级。</li><li>TX_START_ERROR （0x10） 自动启动选择无效。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h2 id="tx-thread-delete"><a href="#tx-thread-delete" class="headerlink" title="tx_thread_delete"></a>tx_thread_delete</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_delete</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>thread_ptr指向以前创建的应用程序线程的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功删除线程。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_DELETE_ERROR （0x11） 指定的线程未处于终止或已完成状态。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h2 id="tx-thread-preemption-change"><a href="#tx-thread-preemption-change" class="headerlink" title="tx_thread_preemption_change"></a>tx_thread_preemption_change</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_preemption_change</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">,</span>    UINT new_threshold<span class="token punctuation">,</span> UINT <span class="token operator">*</span>old_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>thread_ptr指向以前创建的应用程序线程的指针。</li><li>new_threshold新的抢占阈值优先级（0 到 （TX_MAX_PRIORITIES-1）。<ul><li>old_threshold指向位置的指针以返回上一个抢占阈值。</li></ul></li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功抢占阈值更改。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_THRESH_ERROR （0x18） 指定的新抢占阈值不是有效的线程优先级（0 到   （TX_MAX_PRIORITIES-1））以外的值，或大于（优先级较低）的当前线程优先级。</li><li>TX_PTR_ERROR （0x03） 无效指针指向以前的抢占保留存储位置。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h2 id="tx-thread-priority-change"><a href="#tx-thread-priority-change" class="headerlink" title="tx_thread_priority_change"></a>tx_thread_priority_change</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_priority_change</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">,</span>    UINT new_priority<span class="token punctuation">,</span> UINT <span class="token operator">*</span>old_priority<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>thread_ptr指向以前创建的应用程序线程的指针。</li><li>new_priority新线程优先级（0 到 （TX_MAX_PRIORITIES-1）。</li><li>old_priority指向位置的指针以返回线程的上一个优先级。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功优先级更改。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_PRIORITY_ERROR （0x0F） 指定的新优先级无效（0 到TX_MAX_PRIORITIES-1） 以外的值）。</li><li>TX_PTR_ERROR （0x03） 指向上一个优先级存储位置的无效指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h2 id="tx-thread-relinquish"><a href="#tx-thread-relinquish" class="headerlink" title="tx_thread_relinquish"></a>tx_thread_relinquish</h2><pre class="line-numbers language-c"><code class="language-c">VOID <span class="token function">tx_thread_relinquish</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以相同或更高的优先级将处理器控制放弃给其他随时可以运行的线程。</p><h2 id="tx-thread-reset"><a href="#tx-thread-reset" class="headerlink" title="tx_thread_reset"></a>tx_thread_reset</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_reset</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>thread_ptr指向以前创建的线程的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功重置线程。</li></ul><ul><li>TX_NOT_DONE （0x20） 指定的线程未处于TX_COMPLETED或者TX_TERMINATED状态。</li><li>TX_THREAD_ERROR （0x0E） 无效线程指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h2 id="tx-thread-resume"><a href="#tx-thread-resume" class="headerlink" title="tx_thread_resume"></a>tx_thread_resume</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_resume</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>thread_ptr指向挂起的应用程序线程的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功线程恢复。</li><li>TX_SUSPEND_LIFTED （0x19） 先前设置的延迟悬挂已解除。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_RESUME_ERROR （0x12） 指定的线程未挂起，或以前由服务挂起，tx_thread_suspend。</li></ul><h2 id="tx-thread-sleep"><a href="#tx-thread-sleep" class="headerlink" title="tx_thread_sleep"></a>tx_thread_sleep</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span>ULONG timer_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>timer_ticks挂起调用应用程序线程的计时器数，范围从 0 到 0xFFFF。如果指定了 0，服务将立即返回。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功的线程睡眠。</li><li>TX_WAIT_ABORTED （0x1A） 挂起被另一个线程、计时器或 ISR 中止。</li><li>TX_CALLER_ERROR （0x13） 服务从非线程调用。</li></ul><h2 id="tx-thread-suspend"><a href="#tx-thread-suspend" class="headerlink" title="tx_thread_suspend"></a>tx_thread_suspend</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_suspend</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>thread_ptr指向应用程序线程的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功线程挂起。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_SUSPEND_ERROR （0x14） 指定的线程处于终止或已完成状态。</li><li>TX_CALLER_ERROR服务（0x13）无效调用。</li></ul><h2 id="tx-thread-terminate"><a href="#tx-thread-terminate" class="headerlink" title="tx_thread_terminate"></a>tx_thread_terminate</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_terminate</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>thread_ptr指向应用程序线程的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功线程终止。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_CALLER_ERROR服务（0x13）无效调用方。</li></ul><h2 id="tx-thread-wait-abort"><a href="#tx-thread-wait-abort" class="headerlink" title="tx_thread_wait_abort"></a>tx_thread_wait_abort</h2><pre class="line-numbers language-c"><code class="language-c">UINT <span class="token function">tx_thread_time_slice_change</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">,</span>    ULONG new_time_slice<span class="token punctuation">,</span> ULONG <span class="token operator">*</span>old_time_slice<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>thread_ptr指向以前创建的应用程序线程的指针。</li></ul><p><strong>返回值</strong></p><ul><li>TX_SUCCESS （0x00） 成功线程等待中止。</li><li>TX_THREAD_ERROR （0x0E） 无效的应用程序线程指针。</li><li>TX_WAIT_ABORT_ERROR （0x1B） 指定的线程未处于等待状态。</li></ul><h2 id="threadx-demo"><a href="#threadx-demo" class="headerlink" title="threadx_demo"></a>threadx_demo</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * * SPDX-License-Identifier: GPL-2.0-or-later * * Change Logs: * Date        Author        Notes * 2020年8月15日    henji        the first version */</span><span class="token comment" spellcheck="true">/* Includes ------------------------------------------------------------------*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"main.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tim.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"gpio.h"</span></span><span class="token comment" spellcheck="true">/* Private includes ----------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN Includes */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span><span class="token comment" spellcheck="true">/* USER CODE END Includes */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD my_thread_1<span class="token punctuation">;</span>TX_THREAD my_thread_2<span class="token punctuation">;</span>uint8_t pData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"=========ThreadX=========\n"</span><span class="token punctuation">;</span>uint8_t pData1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am thread1 "</span><span class="token punctuation">;</span>uint8_t pData2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am thread2 "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/** * @brief  The application entry point. * @retval int */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>    <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>    <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>    <span class="token comment" spellcheck="true">/* Infinite loop */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* USER CODE END 3 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN 4 */</span><span class="token keyword">void</span> <span class="token function">thread1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    INT count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uint8_t init_data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"start now"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData1<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> init_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>init_data<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8);</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程睡眠1000 timer_ticks</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thread2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    INT count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*挂起线程1*/</span>            <span class="token function">tx_thread_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*恢复线程1*/</span>            <span class="token function">tx_thread_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*终止线程1*/</span>            <span class="token function">tx_thread_terminate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*重置线程1*/</span>            <span class="token function">tx_thread_reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*恢复线程1*/</span>            <span class="token function">tx_thread_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*终止线程1-2*/</span>            <span class="token function">tx_thread_terminate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">tx_thread_terminate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程睡眠500 timer_ticks</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">my_entry_exit_notify</span><span class="token punctuation">(</span>TX_THREAD <span class="token operator">*</span>thread_ptr<span class="token punctuation">,</span> UINT condition<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t entry_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" thread1-entry "</span><span class="token punctuation">;</span>    uint8_t exit_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" thread1-exit "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Determine if the thread was entered or exited. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> TX_THREAD_ENTRY<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Thread entry! */</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> entry_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> TX_THREAD_EXIT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Thread exit! */</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> exit_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread1"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            thread1_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址(这里偷懒,没有进行分配,直接使用未用的起始地址)</span>            <span class="token number">1024</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread2"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程名字</span>            thread2_entry<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token operator">+</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程的起始地址+1024 (-被前面线程用掉了)</span>            <span class="token number">1024</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START<span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程进入和退出时通知*/</span>    <span class="token function">tx_thread_entry_exit_notify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">,</span> my_entry_exit_notify<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200816174331664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(二) ------ 移植到STM32</title>
      <link href="/2020/08/13/threadx-er-yi-zhi-dao-stm32/"/>
      <url>/2020/08/13/threadx-er-yi-zhi-dao-stm32/</url>
      
        <content type="html"><![CDATA[<h2 id="新建裸机项目"><a href="#新建裸机项目" class="headerlink" title="新建裸机项目"></a>新建裸机项目</h2><ul><li>目录结构<br><img src="https://img-blog.csdnimg.cn/20200812193339863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li><li>主函数</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN 1 */</span>    uint8_t pData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"=========ThreadX========= "</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* USER CODE END 1 */</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token comment" spellcheck="true">/* Infinite loop */</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* USER CODE END WHILE */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 3 */</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* USER CODE END 3 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200812193533578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="ThreadX-源码"><a href="#ThreadX-源码" class="headerlink" title="ThreadX 源码"></a>ThreadX 源码</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/azure-rtos/threadx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200812194627241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>主要的两个文件</li></ul><table><thead><tr><th>文件夹</th><th>内容</th></tr></thead><tbody><tr><td>common</td><td>源码</td></tr><tr><td>ports</td><td>移植文件</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200812194730685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>找到<code>threadx\ports\cortex_m4\gnu\example_build</code><br>把tx_initialize_low_level.S文件复制到<code>\threadx\ports\cortex_m4\gnu\src</code><br><img src="https://img-blog.csdnimg.cn/20200812195501334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812195800662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>回到STM32CubeIDE reflesh 工程</li></ul><p><img src="https://img-blog.csdnimg.cn/20200812200354549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>开始添加编译</li></ul><p><img src="https://img-blog.csdnimg.cn/20200812200447459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812200609753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812200704374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/2020081220073894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>添加的两个头文件路径<img src="https://img-blog.csdnimg.cn/20200812200822367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812201017871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812201051992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li><li>添加上的源码路径<br><img src="https://img-blog.csdnimg.cn/20200812201241300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li></ul><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p><img src="https://img-blog.csdnimg.cn/20200812201448739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>不出意外肯定是会报错的（移植怎么可能什么都不改是吧）<br><img src="https://img-blog.csdnimg.cn/2020081220180646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>看下具体的错误，啊，原来是重复定义了，被threadx接管了，那么只要把它注释掉在编译。<br><img src="https://img-blog.csdnimg.cn/20200812201846305.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812202126977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>果不其然 error 又出现了（哪有注释几行就完事了）<br><img src="https://img-blog.csdnimg.cn/20200812202245414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>那看一下具体的错误，<br>__RAM_segment_used_end__<br>_vectors<br>————-没有定义<br>那就去tx_initialize_low_level.S 里面看一下，解释下很清楚了。（为什么全英文的东西愿意看，就是threadx里面文件注释太全了，虽然是英文但是至少比没有注释强太多了）</p><p><img src="https://img-blog.csdnimg.cn/20200812202358800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812202634799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>找到STM32某某<em>FLASH.ld，给他设置地址__RAM_segment_used_end_</em></li></ul><pre class="line-numbers language-c"><code class="language-c">__RAM_segment_used_end__ <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200812203450767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>找到 startup_stm32某某.s 里面 g_pfnVectors 中断向量 应该由 threadx 指向<br>替换_vector = g_pfnVectors ,再次编译<br><img src="https://img-blog.csdnimg.cn/2020081220381551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20200812204336372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li></ul><p><strong>nice ! no error !!! 接下来就是跑threadx的了</strong><br><img src="https://img-blog.csdnimg.cn/20200812204447529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ol><li>首先加入头文件 “tx_api.h”<br><img src="https://img-blog.csdnimg.cn/20200812204623655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li><li>调用 tx_kernel_enter()<br><img src="https://img-blog.csdnimg.cn/20200812213130788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></li><li>编写 void tx_application_define(void *first_unused_memory)就可以运行了</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* USER CODE BEGIN Header */</span><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file           : main.c  * @brief          : Main program body  ******************************************************************************  * @attention  *  * &lt;center>&amp;copy; Copyright (c) 2020 STMicroelectronics.  * All rights reserved.&lt;/center>  *  * This software component is licensed by ST under BSD 3-Clause license,  * the "License"; You may not use this file except in compliance with the  * License. You may obtain a copy of the License at:  *                        opensource.org/licenses/BSD-3-Clause  *  ******************************************************************************  */</span><span class="token comment" spellcheck="true">/* USER CODE END Header */</span><span class="token comment" spellcheck="true">/* Includes ------------------------------------------------------------------*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"main.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spi.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tim.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"gpio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tx_api.h"</span></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* Private variables ---------------------------------------------------------*/</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN PV */</span>TX_THREAD my_thread_1<span class="token punctuation">;</span>TX_THREAD my_thread_2<span class="token punctuation">;</span>uint8_t pData1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I am thread1 "</span><span class="token punctuation">;</span>uint8_t pData2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I am thread2 "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* USER CODE END PV */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN 1 */</span>    uint8_t pData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"=========ThreadX========= \n"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* USER CODE END 1 */</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">/* Initialize all configured peripherals */</span>  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MX_TIM1_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MX_TIM2_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MX_TIM3_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MX_SPI3_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span>  <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">tx_kernel_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//threadx 入口</span>  <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span>  <span class="token comment" spellcheck="true">/* Infinite loop */</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* USER CODE END WHILE */</span>    <span class="token comment" spellcheck="true">/* USER CODE BEGIN 3 */</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* USER CODE END 3 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE BEGIN 4 */</span><span class="token keyword">void</span> <span class="token function">thread1_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData1<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程睡眠1000 timer_ticks</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thread2_entry</span><span class="token punctuation">(</span>ULONG entry_input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">tx_thread_sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程睡眠500 timer_ticks</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">tx_application_define</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>first_unused_memory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*线程1*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span>            <span class="token operator">&amp;</span>my_thread_1<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread1"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程名字</span>            thread1_entry<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程的起始地址(这里偷懒,没有进行分配,直接使用未用的起始地址)</span>            <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START <span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线程2*/</span>    <span class="token function">tx_thread_create</span><span class="token punctuation">(</span>            <span class="token operator">&amp;</span>my_thread_2<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程控制块指针</span>            <span class="token string">"my_thread2"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//线程名字</span>            thread2_entry<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//线程入口函数</span>            <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//线程入口参数</span>            first_unused_memory<span class="token operator">+</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程的起始地址+1024 (-被前面线程用掉了)</span>            <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//内存区域大小K</span>            <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//优先级3  (0~TX_MAX_PRIORITES-1)0  表示最高优先级</span>            <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//禁用抢占的最高优先级</span>            TX_NO_TIME_SLICE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间切片值范围为 1 ~ 0xFFFF(TX_NO_TIME_SLICE = 0)</span>            TX_AUTO_START <span class="token comment" spellcheck="true">//线程自动启动</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* USER CODE END 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乍看以为ok了，但实际上还是有些小毛病的，时间好像对不上号啊，<br>我的时钟频率是80Mhz,延时的时间跟想法有出入。<br>这里还有个地方需要修改就是系统的OS tick，根据设置按需修改<br><img src="https://img-blog.csdnimg.cn/20200812221607228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/2020081222463176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>这样算出来应该差不了<br><img src="https://img-blog.csdnimg.cn/20200812224712476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"><br>完</p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32CubeIDE &amp; OpenOCD</title>
      <link href="/2020/07/29/stm32cubeide-shi-yong-openocd-debug/"/>
      <url>/2020/07/29/stm32cubeide-shi-yong-openocd-debug/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>针对手头的正点原子潘多拉(Pandora IoT)开发板在使用STM32CubeIDE时，提示ST-Link固件升级，不能下载，更不能debug。<br><img src="https://img-blog.csdnimg.cn/20200809190941888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_1,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_10,color_FFFFFF,t_50"><br><img src="https://img-blog.csdnimg.cn/20200809191022401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_20,color_000000,t_90"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>1.方法一：</p><ul><li>固件升级这里可以参考：<br><a href="https://blog.csdn.net/arminkztl/article/details/98382536" target="_blank" rel="noopener">暴力升级你的 ST-Link 及 STM32CubeIDE</a></li></ul><p>2.方法二</p><ul><li>使用OpenOCD<br>首先安装OpenOCD(网上一大堆，不赘诉）<br><a href="https://download.csdn.net/download/qq_37555002/12699689" target="_blank" rel="noopener">点击下载：OpenOCD</a></li></ul><hr><ul><li>cfg文件：</li></ul><p>Pandora的芯片时STM32L475VET6<br>所以这里选择比较接近的stm32L4discovery.cfg<br><img src="https://img-blog.csdnimg.cn/20200809192229296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br>最关键的两个文件 stlink.cfg &amp; stm32l4x.cfg<br>说明stm32l4系列单片机和st-link调试大概都是这样设置的，其它型号以及调试自行组合(里面cfg那么多找个自己跟着改一改)</p><p>这样仿照着为Pandora 写一个 stm32l4Pandora.cfg<br> <img src="https://img-blog.csdnimg.cn/20200809194047736.png"></p><pre class="line-numbers language-c"><code class="language-c">source <span class="token punctuation">[</span>find interface<span class="token operator">/</span>stlink<span class="token punctuation">.</span>cfg<span class="token punctuation">]</span>transport select hla_swdsource <span class="token punctuation">[</span>find target<span class="token operator">/</span>stm32l4x<span class="token punctuation">.</span>cfg<span class="token punctuation">]</span><span class="token macro property"># reset_config srst_only</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一行重置有可能会影响后面的调试，没有影响的就不用注释，有影响就试试注释看一下能不能解决。</p><p><strong>st-link 连接PC，启动OpenOCD</strong></p><ul><li>openocd -f  “绝对路径.cfg文件”（默认路径在board/下）<pre class="line-numbers language-c"><code class="language-c">openocd <span class="token operator">-</span>f <span class="token string">"board/stm32l4Pandora.cfg"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/20200809194945254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br>可以看到已经识别到了st-link 相关信息。</li></ul><p><strong>打开STM32CubeIDE 工程</strong></p><ul><li><p>主函数随便写几行</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* USER CODE BEGIN 1 */</span> uint16_t count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> uint8_t pData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello mcu stm32 !\n"</span><span class="token punctuation">;</span> uint8_t pData1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am pData1\n"</span><span class="token punctuation">;</span> uint8_t pData2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am pData2\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* USER CODE END 1 */</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">/* USER CODE BEGIN 2 */</span> <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData1<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> pData2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pData2<span class="token punctuation">)</span><span class="token punctuation">,</span> HAL_MAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* USER CODE END 2 */</span> <span class="token comment" spellcheck="true">/* Infinite loop */</span> <span class="token comment" spellcheck="true">/* USER CODE BEGIN WHILE */</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     count<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* USER CODE END WHILE */</span>     <span class="token comment" spellcheck="true">/* USER CODE BEGIN 3 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* USER CODE END 3 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>配置OpenOCD</strong></li></ul><ol><li>首先找到Run configurations<br><img src="https://img-blog.csdnimg.cn/20200809195630632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20200809195528470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"></li></ol></li></ul><ol start="2"><li>选择 ST-LINK(OpenOCD)<br><img src="https://img-blog.csdnimg.cn/20200809200115593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200809200206619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200809200324463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br>这样就烧写进去了<br><img src="https://img-blog.csdnimg.cn/20200809200535761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><ol start="3"><li>点击debug<br><img src="https://img-blog.csdnimg.cn/2020080920075422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200809201150475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70"><br>完</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32CubeIDE </tag>
            
            <tag> OpenOCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadX(一) ------ 初识</title>
      <link href="/2020/07/28/threadx-yi-chu-shi/"/>
      <url>/2020/07/28/threadx-yi-chu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><b>    Azure RTOS ThreadX是专为嵌入式应用程序设计的高性能实时内核。与其他实时内核不同，ThreadX具有通用性-通过使用功能强大的CISC，RISC和DSP处理器的应用程序，可以轻松地在基于微控制器的小型应用程序中扩展。<br>ThreadX可基于其基础体系结构进行扩展。因为ThreadX服务是作为C库实现的，所以只有应用程序实际使用的那些服务才被带到运行时映像中。 因此，ThreadX的实际大小完全由应用程序确定。 对于大多数应用程序，ThreadX的指令映像大小在2 KB至15 KB之间。</b><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p><img src="https://img-blog.csdnimg.cn/20200818104442474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h2><p><img src="https://img-blog.csdnimg.cn/20200812185340866.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_30,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_20,color_0000ee,t_100#pic_center"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://img-blog.csdnimg.cn/20200812182149283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> VOID                                    void</span><span class="token keyword">typedef</span> <span class="token keyword">char</span>                                    CHAR<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>                           UCHAR<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span>                                     INT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>                            UINT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span>                                    LONG<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span>                           ULONG<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">short</span>                                   SHORT<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>                          USHORT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FLASH-amp-RAM"><a href="#FLASH-amp-RAM" class="headerlink" title="FLASH &amp; RAM"></a>FLASH &amp; RAM</h2><p><img src="https://img-blog.csdnimg.cn/20200812191129136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTU1MDAy,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/azure-rtos/threadx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://docs.microsoft.com/en-us/azure/rtos/threadx/appendix-a#entry-function" target="_blank" rel="noopener">API传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> ThreadX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
